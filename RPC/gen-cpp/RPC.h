/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RPC_H
#define RPC_H

#include <thrift/TDispatchProcessor.h>
#include "interface_types.h"



class RPCIf {
 public:
  virtual ~RPCIf() {}
  virtual void ping() = 0;
  virtual void run() = 0;
};

class RPCIfFactory {
 public:
  typedef RPCIf Handler;

  virtual ~RPCIfFactory() {}

  virtual RPCIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RPCIf* /* handler */) = 0;
};

class RPCIfSingletonFactory : virtual public RPCIfFactory {
 public:
  RPCIfSingletonFactory(const boost::shared_ptr<RPCIf>& iface) : iface_(iface) {}
  virtual ~RPCIfSingletonFactory() {}

  virtual RPCIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RPCIf* /* handler */) {}

 protected:
  boost::shared_ptr<RPCIf> iface_;
};

class RPCNull : virtual public RPCIf {
 public:
  virtual ~RPCNull() {}
  void ping() {
    return;
  }
  void run() {
    return;
  }
};


class RPC_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RPC_ping_args(const RPC_ping_args&);
  RPC_ping_args& operator=(const RPC_ping_args&);
  RPC_ping_args() {
  }

  virtual ~RPC_ping_args() throw();

  bool operator == (const RPC_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPC_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPC_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPC_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RPC_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPC_ping_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RPC_ping_result(const RPC_ping_result&);
  RPC_ping_result& operator=(const RPC_ping_result&);
  RPC_ping_result() {
  }

  virtual ~RPC_ping_result() throw();

  bool operator == (const RPC_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPC_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPC_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPC_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RPC_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RPC_run_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RPC_run_args(const RPC_run_args&);
  RPC_run_args& operator=(const RPC_run_args&);
  RPC_run_args() {
  }

  virtual ~RPC_run_args() throw();

  bool operator == (const RPC_run_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPC_run_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPC_run_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPC_run_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RPC_run_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPC_run_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RPC_run_result(const RPC_run_result&);
  RPC_run_result& operator=(const RPC_run_result&);
  RPC_run_result() {
  }

  virtual ~RPC_run_result() throw();

  bool operator == (const RPC_run_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPC_run_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPC_run_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPC_run_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RPC_run_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RPCClient : virtual public RPCIf {
 public:
  RPCClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RPCClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void run();
  void send_run();
  void recv_run();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RPCProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RPCIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RPCProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_run(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RPCProcessor(boost::shared_ptr<RPCIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &RPCProcessor::process_ping;
    processMap_["run"] = &RPCProcessor::process_run;
  }

  virtual ~RPCProcessor() {}
};

class RPCProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RPCProcessorFactory(const ::boost::shared_ptr< RPCIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RPCIfFactory > handlerFactory_;
};

class RPCMultiface : virtual public RPCIf {
 public:
  RPCMultiface(std::vector<boost::shared_ptr<RPCIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RPCMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RPCIf> > ifaces_;
  RPCMultiface() {}
  void add(boost::shared_ptr<RPCIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void run() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->run();
    }
    ifaces_[i]->run();
  }

};



#endif
